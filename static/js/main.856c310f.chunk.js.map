{"version":3,"sources":["component/Unit.jsx","component/UnitType.jsx","App.js","serviceWorker.js","index.js"],"names":["Unit","handleChange","id","json","ReactDOM","findDOMNode","document","getElementById","value","toUpperCase","props","unitType","axios","post","then","response","console","log","thisSession","JSON","parse","stringify","data","outputValue","catch","error","handleChangeReverse","className","defaultValue","onChange","this","style","width","type","list","map","player","i","key","padding","paddingBottom","React","Component","UnitType","event","array","target","setState","List","state","App","border","height","paddingLeft","margin","marginLeft","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.856c310f.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport ReactDOM from 'react-dom';\n\nclass Unit extends React.Component {\n    handleChange = (id) => {\n        let json = {\n            \"inputUnit\": ReactDOM.findDOMNode(document.getElementById('inputUnit')).value.toUpperCase(),\n            \"inputValue\": ReactDOM.findDOMNode(document.getElementById('inputValue')).value,\n            \"outputUnit\": ReactDOM.findDOMNode(document.getElementById('outputUnit')).value.toUpperCase(),\n            \"unitType\": this.props.unitType.toUpperCase()\n        }\n        axios.post('http://localhost:8080/quantityconverter/convert', json).then(function (response) {\n            console.log(response);\n            var thisSession = JSON.parse(JSON.stringify(response.data));\n            ReactDOM.findDOMNode(document.getElementById('outputValue')).value = thisSession.outputValue;\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    handleChangeReverse = () => {\n        let json = {\n            \"inputUnit\": ReactDOM.findDOMNode(document.getElementById('outputUnit')).value.toUpperCase(),\n            \"inputValue\": ReactDOM.findDOMNode(document.getElementById('outputValue')).value,\n            \"outputUnit\": ReactDOM.findDOMNode(document.getElementById('inputUnit')).value.toUpperCase(),\n            \"unitType\": this.props.unitType.toUpperCase()\n        }\n        axios.post('http://localhost:8080/quantityconverter/convert', json).then(function (response) {\n            console.log(response);\n            let thisSession = JSON.parse(JSON.stringify(response.data));\n            ReactDOM.findDOMNode(document.getElementById('inputValue')).value = thisSession.outputValue;\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={\"form\"}>\n                    <input id=\"inputValue\" className=\"input-div\" defaultValue={\"\"} onChange={this.handleChange}\n                           style={{width: 208}}\n                           type={\"number\"}/>\n                    <br/>\n                    <select id=\"inputUnit\" className=\"input-div\" onChange={this.handleChangeReverse}>\n                        {\n                            this.props.list.map(function (player, i) {\n                                return <option key={i}>{player}</option>\n                            })\n                        }\n                    </select>\n                </div>\n                <h3 className={\"form\"} style={{padding: 10, paddingBottom: 30}}>= </h3>\n                <div className={\"form\"}>\n                    <input id=\"outputValue\" className=\"input-div\" onChange={this.handleChangeReverse} defaultValue={\"\"}\n                           style={{width: 208}}\n                           type={\"number\"}/>\n                    <br/>\n                    <select id=\"outputUnit\" className=\"input-div\" onChange={this.handleChange}>\n                        {\n                            this.props.list.map(function (player, i) {\n                                return <option key={i}>{player}</option>\n                            })\n                        }\n                    </select>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Unit;","import React from 'react';\nimport Unit from \"./Unit\";\nimport ReactDOM from \"react-dom\";\n\nclass UnitType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            List: [\n                \"Feet\",\n                \"Inch\",\n                \"Centimeter\",\n                \"Yard\"\n            ],\n            unitType: \"LENGTH\"\n        }\n    }\n\n    handleChange = (event) => {\n        let Length =\n            [\n                \"Feet\",\n                \"Meter\",\n                \"Centimeter\",\n                \"Yard\"\n            ];\n        let Weight =\n            [\n                \"Kilograms\",\n                \"Grams\",\n                \"Tonne\"\n            ];\n        let Volume =\n            [\n                \"Litre\",\n                \"Millilitre\",\n                \"Gallon\"\n            ];\n\n        let Temperature =\n            [\n                \"Celcius\",\n                \"Fahrenheit\"\n            ];\n        let unitType = event.target.value;\n        let array;\n        if (unitType === \"Length\")\n            array = Length;\n        else if (unitType === \"Weight\") {\n            array = Weight;\n        } else if (unitType === \"Temperature\")\n            array = Temperature;\n        else\n            array = Volume;\n        this.setState({\n                unitType: event.target.value,\n                List: array,\n            }\n        )\n        ReactDOM.findDOMNode(document.getElementById('inputValue')).value = \"\";\n        ReactDOM.findDOMNode(document.getElementById('outputValue')).value = \"\";\n    }\n\n    render() {\n        return (\n            <form className=\"form\">\n                <div className=\"unit-type\">\n                    <select id=\"myList\" defaultValue={\"Length\"} onChange={this.handleChange}>\n                        <option>Length</option>\n                        <option>Weight</option>\n                        <option>Temperature</option>\n                        <option>Volume</option>\n                    </select>\n                </div>\n                <br/>\n                <Unit unitType={this.state.unitType} list={this.state.List}/>\n            </form>\n        )\n    }\n}\n\nexport default UnitType;","import React from 'react';\nimport UnitType from './component/UnitType.jsx';\nimport './App.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div style={{border: \"thin solid #d5cccc\", width: 500, height: 220, paddingLeft: 40, margin: 20}}>\n                <div className=\"app\">\n                    <h2 style={{marginLeft: 120}}> Quantity Converter </h2><br/>\n                    <br/>\n                </div>\n                <UnitType/><br/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}